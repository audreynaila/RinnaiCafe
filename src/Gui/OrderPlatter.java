
package Gui;

import Model.MessageDialog;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author audreynaila
 */
public class OrderPlatter extends javax.swing.JFrame {

    /**
     * Creates new form OrderPlatter
     */
    public OrderPlatter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keranjang = new javax.swing.JLabel();
        gui = new javax.swing.JLabel();
        detailchiken = new javax.swing.JButton();
        detailfruit = new javax.swing.JButton();
        detailgrazing = new javax.swing.JButton();
        detailcheese = new javax.swing.JButton();
        detailmeat = new javax.swing.JButton();
        detailsalad = new javax.swing.JButton();
        nextbakery = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        buysalad = new javax.swing.JButton();
        buymeat = new javax.swing.JButton();
        buycheese = new javax.swing.JButton();
        buychiken = new javax.swing.JButton();
        buygrazing = new javax.swing.JButton();
        buyfruit = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        keranjang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/keranjang.png"))); // NOI18N
        keranjang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keranjangMouseClicked(evt);
            }
        });
        getContentPane().add(keranjang, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 180, -1, -1));

        gui.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/Platter Page.png"))); // NOI18N
        getContentPane().add(gui, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        detailchiken.setText("detail");
        detailchiken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailchikenActionPerformed(evt);
            }
        });
        getContentPane().add(detailchiken, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 450, 90, 30));

        detailfruit.setText("detail");
        detailfruit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailfruitActionPerformed(evt);
            }
        });
        getContentPane().add(detailfruit, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 450, 100, 40));

        detailgrazing.setText("detail");
        detailgrazing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailgrazingActionPerformed(evt);
            }
        });
        getContentPane().add(detailgrazing, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 450, 100, 30));

        detailcheese.setText("detail");
        detailcheese.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailcheeseActionPerformed(evt);
            }
        });
        getContentPane().add(detailcheese, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 740, 100, 30));

        detailmeat.setText("detail");
        detailmeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailmeatActionPerformed(evt);
            }
        });
        getContentPane().add(detailmeat, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 740, 90, 30));

        detailsalad.setText("detail");
        detailsalad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsaladActionPerformed(evt);
            }
        });
        getContentPane().add(detailsalad, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 740, 100, 30));

        nextbakery.setText("next bakery");
        nextbakery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextbakeryActionPerformed(evt);
            }
        });
        getContentPane().add(nextbakery, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 783, 170, 50));

        btnBack.setText("back coffe");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 790, 160, 50));

        buysalad.setText("buy");
        buysalad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buysaladActionPerformed(evt);
            }
        });
        getContentPane().add(buysalad, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 740, 90, 30));

        buymeat.setText("buy");
        buymeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buymeatActionPerformed(evt);
            }
        });
        getContentPane().add(buymeat, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 740, 90, 30));

        buycheese.setText("buy");
        buycheese.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buycheeseActionPerformed(evt);
            }
        });
        getContentPane().add(buycheese, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 740, 90, 30));

        buychiken.setText("buy");
        buychiken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buychikenActionPerformed(evt);
            }
        });
        getContentPane().add(buychiken, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 450, 80, 30));

        buygrazing.setText("buy");
        buygrazing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buygrazingActionPerformed(evt);
            }
        });
        getContentPane().add(buygrazing, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 450, 100, 30));

        buyfruit.setText("buy");
        buyfruit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyfruitActionPerformed(evt);
            }
        });
        getContentPane().add(buyfruit, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 450, 100, 40));

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 50, -1, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buymeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buymeatActionPerformed
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (11, ' Gour Mate Crate ', 48000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    
   String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);


    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buymeatActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        OrderCoffe coffe = new OrderCoffe(); 
        coffe.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void nextbakeryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextbakeryActionPerformed
                                            
        OrderBakery bakery = new OrderBakery(); 
        bakery.setVisible(true);
        dispose();
    }//GEN-LAST:event_nextbakeryActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        MessageDialog obj = new MessageDialog(this);
       obj.showMessage("Do You Want To Exit ?", "");
       if (obj.getMessageType() == MessageDialog.MessageType.OK) {
            System.out.println("User click ok");
        } else {
            System.out.println("User click cancel");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void detailfruitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailfruitActionPerformed
        DetailPlatter1 pl1 = new DetailPlatter1();
        pl1.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailfruitActionPerformed

    private void detailgrazingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailgrazingActionPerformed
         DetailPlatter2 pl2 = new DetailPlatter2();
        pl2.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailgrazingActionPerformed

    private void detailchikenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailchikenActionPerformed
        DetailPlatter3 pl3 = new DetailPlatter3();
        pl3.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailchikenActionPerformed

    private void detailcheeseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailcheeseActionPerformed
        DetailPlatter4 pl4 = new DetailPlatter4();
        pl4.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailcheeseActionPerformed

    private void detailmeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailmeatActionPerformed
        DetailPlatter5 pl5 = new DetailPlatter5();
        pl5.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailmeatActionPerformed

    private void detailsaladActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsaladActionPerformed
        DetailPlatter6 pl6 = new DetailPlatter6();
        pl6.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailsaladActionPerformed

    private void buyfruitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyfruitActionPerformed
     Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (7, 'Fresh Fruit Crate', 45000, 40)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
   
    JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buyfruitActionPerformed

    private void buygrazingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buygrazingActionPerformed
        Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (8, 'Continental Grazing ', 48000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buygrazingActionPerformed

    private void buychikenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buychikenActionPerformed
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (9, 'Chiken Crate ', 45000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buychikenActionPerformed

    private void buycheeseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buycheeseActionPerformed
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (9, 'Cheese and Dips Crate ', 45000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buycheeseActionPerformed

    private void buysaladActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buysaladActionPerformed
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (12, 'Fresh Salad Crate ', 40000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
   String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buysaladActionPerformed

    private void keranjangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keranjangMouseClicked
        TabelTransaksi ts = new TabelTransaksi();
        ts.setVisible(true);
        dispose();
    }//GEN-LAST:event_keranjangMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderPlatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderPlatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderPlatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderPlatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderPlatter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton buycheese;
    private javax.swing.JButton buychiken;
    private javax.swing.JButton buyfruit;
    private javax.swing.JButton buygrazing;
    private javax.swing.JButton buymeat;
    private javax.swing.JButton buysalad;
    private javax.swing.JButton detailcheese;
    private javax.swing.JButton detailchiken;
    private javax.swing.JButton detailfruit;
    private javax.swing.JButton detailgrazing;
    private javax.swing.JButton detailmeat;
    private javax.swing.JButton detailsalad;
    private javax.swing.JLabel gui;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel keranjang;
    private javax.swing.JButton nextbakery;
    // End of variables declaration//GEN-END:variables

    void thisVisible(boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}

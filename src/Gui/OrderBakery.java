
package Gui;

import Model.MessageDialog;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author audreynaila
 */
public class OrderBakery extends javax.swing.JFrame {

    /**
     * Creates new form OrderBakery
     */
    public OrderBakery() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keranjang = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        detailcroissant = new javax.swing.JButton();
        detaildanis = new javax.swing.JButton();
        detailspicy = new javax.swing.JButton();
        buyspicy = new javax.swing.JButton();
        buydanis = new javax.swing.JButton();
        buymate = new javax.swing.JButton();
        buycroissant = new javax.swing.JButton();
        buybun = new javax.swing.JButton();
        detail = new javax.swing.JButton();
        buysmoke = new javax.swing.JButton();
        detailmate = new javax.swing.JButton();
        detailsmoke = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        keranjang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/keranjang.png"))); // NOI18N
        keranjang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keranjangMouseClicked(evt);
            }
        });
        getContentPane().add(keranjang, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 230, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gambar/Bakery.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        detailcroissant.setText("detail");
        detailcroissant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailcroissantActionPerformed(evt);
            }
        });
        getContentPane().add(detailcroissant, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 490, 100, 40));

        detaildanis.setText("detail");
        detaildanis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detaildanisActionPerformed(evt);
            }
        });
        getContentPane().add(detaildanis, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 490, 100, 30));

        detailspicy.setText("detail");
        detailspicy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailspicyActionPerformed(evt);
            }
        });
        getContentPane().add(detailspicy, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 490, 100, 30));

        buyspicy.setText("buy");
        buyspicy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyspicyActionPerformed(evt);
            }
        });
        getContentPane().add(buyspicy, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 490, 90, 30));

        buydanis.setText("buy");
        buydanis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buydanisActionPerformed(evt);
            }
        });
        getContentPane().add(buydanis, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 490, 90, 30));

        buymate.setText("buy");
        buymate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buymateActionPerformed(evt);
            }
        });
        getContentPane().add(buymate, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 800, 90, 30));

        buycroissant.setText("buy");
        buycroissant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buycroissantActionPerformed(evt);
            }
        });
        getContentPane().add(buycroissant, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 490, 100, 40));

        buybun.setText("buy");
        buybun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buybunActionPerformed(evt);
            }
        });
        getContentPane().add(buybun, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 800, 100, 40));

        detail.setText("detail");
        detail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailActionPerformed(evt);
            }
        });
        getContentPane().add(detail, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 800, 100, 40));

        buysmoke.setText("buy");
        buysmoke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buysmokeActionPerformed(evt);
            }
        });
        getContentPane().add(buysmoke, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 790, 90, 40));

        detailmate.setText("detail");
        detailmate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailmateActionPerformed(evt);
            }
        });
        getContentPane().add(detailmate, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 800, 90, 30));

        detailsmoke.setText("detail");
        detailsmoke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsmokeActionPerformed(evt);
            }
        });
        getContentPane().add(detailsmoke, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 800, 100, 30));

        btnBack.setText("Back Platter");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 790, 160, 50));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 40, -1, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        OrderPlatter plt = new OrderPlatter(); 
        plt.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MessageDialog obj = new MessageDialog(this);
       obj.showMessage("Do You Want To Exit ?", "");
       if (obj.getMessageType() == MessageDialog.MessageType.OK) {
            System.out.println("User click ok");
        } else {
            System.out.println("User click cancel");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void detailcroissantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailcroissantActionPerformed
        DetailBakery1 br1 = new DetailBakery1();
        br1.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailcroissantActionPerformed

    private void detaildanisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detaildanisActionPerformed
         DetailBakery2 br2 = new DetailBakery2();
        br2.setVisible(true);
        dispose();
    }//GEN-LAST:event_detaildanisActionPerformed

    private void detailspicyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailspicyActionPerformed
        DetailBakery3 br3 = new DetailBakery3();
        br3.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailspicyActionPerformed

    private void detailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailActionPerformed
        DetailBakery4 br4 = new DetailBakery4();
        br4.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailActionPerformed

    private void detailmateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailmateActionPerformed
        DetailBakery5 br5 = new DetailBakery5();
        br5.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailmateActionPerformed

    private void detailsmokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsmokeActionPerformed
        DetailBakery6 br6 = new DetailBakery6();
        br6.setVisible(true);
        dispose();
    }//GEN-LAST:event_detailsmokeActionPerformed

    private void buycroissantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buycroissantActionPerformed
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (13, ' Croissant ', 20000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buycroissantActionPerformed

    private void buydanisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buydanisActionPerformed
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (14, ' Peach Danis', 25000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buydanisActionPerformed

    private void buyspicyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyspicyActionPerformed
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (8, ' Spicy Beef Croisant ', 25000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
   String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buyspicyActionPerformed

    private void buybunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buybunActionPerformed
        Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (17, 'Korean Garlic Chesse Corn', 30000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buybunActionPerformed

    private void buymateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buymateActionPerformed
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (17,  Korean Garlic Cheese Corn ', 30000, 30)";
    stmt.executeUpdate(sql);

   // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buymateActionPerformed

    private void buysmokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buysmokeActionPerformed
         Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (16, ' Korean Garlic Bun', 30000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);

    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }                                      

    private void buymateActionPerformed() {                                        
          Connection conn = null;
     Statement stmt = null;
     try {
    // Mengatur koneksi database
    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db_caferinai", "root", "");
    stmt = conn.createStatement();

    String sql = "INSERT INTO orders_items (ProductID, Name, Price, Stock) VALUES (18,  Korean Garlic Smoke Beef ', 30000, 30)";
    stmt.executeUpdate(sql);

    // Menampilkan pesan berhasil
     JOptionPane.showMessageDialog(null, "Data berhasil ditambahkan ke tabel orders_items.");

    // Menutup statement
    stmt.close();

    // Mengambil data dari tabel orders_items
    String selectSql = "SELECT * FROM orders_items";
   Statement selectStmt = conn.createStatement();
   ResultSet rs = selectStmt.executeQuery(selectSql);
   
    // Membuat model tabel
    DefaultTableModel model = new DefaultTableModel();
    JTable table = new JTable(model);

    // Menambahkan kolom ke model tabel
    model.addColumn("ProductID");
    model.addColumn("Name");
    model.addColumn("Price");
    model.addColumn("Stock");

    // Mengisi data ke model tabel
    while (rs.next()) {
        Object[] row = new Object[4];
        row[0] = rs.getInt("ProductID");
        row[1] = rs.getString("Name");
        row[2] = rs.getInt("Price");
        row[3] = rs.getInt("Stock");
        model.addRow(row);
    }

    // Menampilkan tabel dalam GUI TabelTransaksi
    TabelTransaksi tabelTransaksi = new TabelTransaksi();
    tabelTransaksi.setTableModel(model);
    tabelTransaksi.setVisible(true);

    // Menutup koneksi
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_buysmokeActionPerformed

    private void keranjangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keranjangMouseClicked
        TabelTransaksi tb = new TabelTransaksi();
        tb.setVisible(true);
        dispose();
    }//GEN-LAST:event_keranjangMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderBakery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderBakery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderBakery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderBakery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderBakery().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton buybun;
    private javax.swing.JButton buycroissant;
    private javax.swing.JButton buydanis;
    private javax.swing.JButton buymate;
    private javax.swing.JButton buysmoke;
    private javax.swing.JButton buyspicy;
    private javax.swing.JButton detail;
    private javax.swing.JButton detailcroissant;
    private javax.swing.JButton detaildanis;
    private javax.swing.JButton detailmate;
    private javax.swing.JButton detailsmoke;
    private javax.swing.JButton detailspicy;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel keranjang;
    // End of variables declaration//GEN-END:variables
}
